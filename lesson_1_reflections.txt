How did viewing a diff between two versions of a file help you see the bug that was introduced?

    I was able to compare the code that I know worked, a known-good copy, with the new code.
    Any errors would be in th enew code, so I could focus my attention there. 

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

    I can easily and quickly revert to an old, stable version if anything breaks.
    I can compare versions to find what caused the error instead of having to dig through the entire program.
    I can even branch off versions to experiment without jeopardizing my stable code.

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google docs does?

    Pro: I only commit when it makes sense.
    Pro: My commits won't be too large or too small.
    Con: I may forget to commit.

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

    Most files aren't as interconnected as code with multiple files working together to create one product.
    So a VCS made for code, like Git, would want the option to save multiple files together.
    Documents, pictures, and the other files usually covered by Google Docs exist independently.

How can you use the commands git log and git diff to view the history of files?

    1. Use 'git log' to find the commit ID of the changed version and the one preceding it.
    2. Use 'git diff old_ID new_ID' to compare the files.
    3. Review the changes.

How might using version control make you more confident to make changes that could break something?

    I can make changes knowing that if I break something I can easily revert to a stable version of the code.
    There's no fear of losing hours of work so there's nothing stopping me from innovating.

Now that you have your workspace set up, what do you want to try using Git for?

    I want to use Git for the coding projects that I am doing in my Nanodegrees.
    That will be practice for using Git with my coworkers on our projects.