What happens when you initialize a repository?
Why do you need to do it?
	Initializing the repository creates the .git folder and metadata for tracking file changes.
	You need to do it because otherwise Git won't work. The necessary data isn't there.

How is the staging area different from the working directory and the repository?
What value do you think it offers?
	The working directory contains all of the files that you can work on.
	The repository also has a .git folder and the metadata for tracking changes.
	The staging area contains the files from the working directory to be saved as a commit.
	The staging area's value is that it allows you to select which files are saved as part of the commit.
	Otherwise a commit would contain everything in the repository which would group too many changes together.

How can you use the staging area to make sure you have one commit per logical change?
	Even if you edit multiple documents, you can save only one at a time.
	You can check your differences between the staging area and the most recent commit then save the one change.

What are some situations when branches would be helpful in keeping your history organized?
How would branches help?	
	Branches keep experimental changes separate from the stable, primary version of the code.
	They let you make radical changes without jeopardizing the core of the project.
	The different branch names are easier to work with than ID numbers.
	You can see how many different versions of the code there are with one command.

How do the diagrams help you visualize the branch structure?
	The diagrams show how branches launch off from different parent commits.
	They also show how commits don't talk with one another or can be lost.

What is the result of merging two branches together? 
Why do we represent it in the diagram the way we do?
	Merging combines the changes of two branches relative a shared parent into once branch.
	The diagram shows how the merged branch comes from two parent commits.